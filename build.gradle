buildscript {
    repositories {
        maven {
            url 'http://nexus.intr/repository/mavengroup/'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 5, 'minutes'
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
plugins {
    id "org.asciidoctor.convert" version "1.5.2"
    id "com.gorylenko.gradle-git-properties" version "1.5.1"
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'
apply plugin: "io.spring.dependency-management"

def versionPropsFile = file('version.properties')
def versionBuild

if (versionPropsFile.canRead()) {
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    versionBuild = versionProps['VERSION_BUILD'].toInteger()
} else {
    throw new GradleException("Could not read version.properties!")
}

ext.autoIncrementBuildNumber = {
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'ru.majordomo.hms.rc.user'
            artifactId 'resources'
            version '1.5.' + versionBuild
            artifact resourceJar
        }
    }
    repositories {
        maven {
            url uri(mavenUrl)
            credentials {
                username = mavenUser
                password = mavenPass
            }
        }
    }
}

version = '0.0.1-SNAPSHOT'

archivesBaseName = 'rc-user'

jar {
    version = version
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into "static/docs"
    }
}

springBoot {
    buildInfo()
}

task resourceJar(type: Jar, dependsOn: compileJava) {
    baseName = 'resources'
    from sourceSets.main.output.classesDir
    include 'ru/majordomo/hms/rc/user/resources/**'
}

repositories {
    maven {
        url 'http://nexus.intr/repository/mavengroup'
    }
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    compile.exclude module: "hystrix-core"
    compile.exclude module: "feign-hystrix"
}

dependencies {
    compile('ru.majordomo.hms.rc.staff:resources:[2.0.9, 2.1)')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compile('org.springframework.cloud:spring-cloud-starter-openfeign')
    compile('org.springframework.cloud:spring-cloud-starter-oauth2')
    compile("org.springframework.cloud:spring-cloud-starter-sleuth")
    compile('org.springframework.cloud:spring-cloud-starter-bus-amqp')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-data-redis')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-amqp')
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.7'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.7'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.7'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.7'
    compile('ru.majordomo.hms.personmgr:exceptions:1.0.17')
    compile("dnsjava:dnsjava:2.1.7")
    compile("com.cronutils:cron-utils:5.0.5")
    compile("commons-validator:commons-validator:1.6")
    compile("com.googlecode.libphonenumber:libphonenumber:7.7.3")
    compile("com.jcraft:jsch:0.1.54")
    testCompile('com.github.fakemongo:fongo:2.2.0-RC2')
    testCompile group: 'com.github.fppt', name: 'jedis-mock', version: '0.1.16'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc:${springRestDocsVersion}")
    testCompile('org.apache.qpid:qpid-broker:6.0.4')
    testCompile('com.h2database:h2')
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile(group: 'com.mysql', name: 'management', version: '1.1.6') { exclude(module: 'jmxtools') }
    compile('org.hibernate.validator:hibernate-validator:6.0.13.Final')
    compile('javax.el:javax.el-api:3.0.0')
    compile('org.glassfish.web:javax.el:2.2.4')
    compile('com.google.guava:guava:21.0')
    compile("net.javacrumbs.shedlock:shedlock-spring:0.10.0")
    compile("net.javacrumbs.shedlock:shedlock-provider-mongo:0.8.0")
    compile("org.jongo:jongo:1.4.0")
    compile("org.projectlombok:lombok:1.18.12")
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    compileOnly("org.springframework.boot:spring-boot-configuration-processor")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springVersion}"
    }
}

clean.doFirst {
    delete "${rootDir}/work/"
}

ext {
    snippetsDir = file("build/generated-snippets")
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    outputDir "build/asciidoc"
    dependsOn test
    sourceDir snippetsDir
}

build.dependsOn("resourceJar")
publish.doFirst autoIncrementBuildNumber
