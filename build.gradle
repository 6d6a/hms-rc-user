buildscript {
    ext {
        springBootVersion = '1.3.6.RELEASE'
    }
    repositories {
        mavenCentral()
	jcenter()
	maven {
		url 'http://maven.intr'
	}
    }
    configurations.all {
      resolutionStrategy.cacheDynamicVersionsFor 30, 'minutes'
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:1.2")
        classpath "com.avast.gradle:docker-compose-gradle-plugin:0.3.9"
	classpath("ru.majordomo:copycompose:1.+")

    }
}
plugins {
	id 'org.ajoberstar.grgit' version '1.5.1'
}


apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: 'docker-compose'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'ru.majordomo.copycompose'


group = 'hms'

jar {
    baseName = 'rc-user'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-amqp')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.SR3"
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    def dockerDir = "docker"
    def git = org.ajoberstar.grgit.Grgit.open(file('.'))
    tagVersion = git.branch.getCurrent().getName().replaceAll("refs/heads/","")
    if(tagVersion == "HEAD") { // в gitlab-runner после пулла branch.getCurrent() указывает всегда на HEAD в любой ветке
      tagVersion = project.projectBranch
    }
    push = true
    project.group = "docker-registry.intr/"+project.group
    applicationName = jar.baseName
    dockerfile = file("${buildDir}/Dockerfile")
    doFirst {
        copy {
            from "${dockerDir}/Dockerfile"
            into buildDir
            expand(jarBuildName: jar.getArchiveName(), projectName: project.name)
        }
        copy {
            from jar
            into stageDir
        }
    }
}
task cloneCompose(type: Exec) {
	doFirst {
		delete 'docker-compose'
	}
	commandLine 'git','clone','git@gitlab.intr:hms/docker-compose.git'
}

task composePull(type: Exec) {
	commandLine 'docker-compose', 'pull'
}

task delCompose(type: Delete) {
	delete 'docker-compose'
}

cookCompose.dependsOn("cloneCompose")
composePull.dependsOn("cookCompose")
composeUp.dependsOn("composePull")
composeUp.finalizedBy delCompose

composeDown {
	doLast { delete 'docker-compose.yml' }
}

