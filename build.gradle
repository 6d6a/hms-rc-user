import de.undercouch.gradle.tasks.download.Download

buildscript {
    repositories {
            maven {
                url 'https://nexus.intr/repository/mavengroup/'
            }
        }
    dependencies {
        classpath("ru.majordomo.gradle.plugins:copycompose:1.+")
        classpath('de.undercouch:gradle-download-task:3.1.2')
    }
}

apply plugin: 'ru.majordomo.gradle.plugins.copycompose'

task downloadInit(type: Download) {
    src 'https://nexus.intr/repository/init/gradle-init/0.1/init.gradle'
    dest buildDir
}

task buildDocker(type: GradleBuild, dependsOn: downloadInit) {
    buildFile new File('real-build.gradle')
    startParameter.addInitScript(new File('build/init.gradle'))
    def props = project.properties.servicesMap
    if(project.hasProperty('debug')) {
        props['debug'] = 'yes'
    }
    startParameter.setProjectProperties(props)
    tasks = ['buildDocker']
}

task composeUp(type: GradleBuild,dependsOn: downloadInit) {
    buildFile new File('real-build.gradle')
    startParameter.addInitScript(new File('build/init.gradle'))
    def props = project.properties.servicesMap
    if(project.hasProperty('projectBranch')) {
        props['projectBranch'] = project.projectBranch
    }
    startParameter.setProjectProperties(props)
    tasks = ['composeUp']
}

task composeDown(type: GradleBuild, dependsOn: downloadInit) {
    buildFile new File('real-build.gradle')
    startParameter.addInitScript(new File('build/init.gradle'))
    startParameter.setProjectProperties(project.properties.servicesMap)
    tasks = ['composeDown']
}

task build(type: GradleBuild, dependsOn: downloadInit) {
    buildFile new File('real-build.gradle')
    startParameter.addInitScript(new File('build/init.gradle'))
    startParameter.setProjectProperties(project.properties.servicesMap)
    tasks = ['build']
}
task resourceJar(type: GradleBuild, dependsOn: downloadInit) {
    buildFile new File('real-build.gradle')
    startParameter.addInitScript(new File('build/init.gradle'))
    startParameter.setProjectProperties(project.properties.servicesMap)
    tasks = ['resourceJar']
}
task publish(type: GradleBuild, dependsOn: downloadInit) {
    buildFile new File('real-build.gradle')
    startParameter.addInitScript(new File('build/init.gradle'))
    startParameter.setProjectProperties(project.properties.servicesMap)
    tasks = ['publish']
}
