buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
        springRestDocsVersion = '1.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'http://maven.intr'
        }
    }
    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 30, 'minutes'
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:1.2")
        classpath "com.avast.gradle:docker-compose-gradle-plugin:0.3.9"
        classpath("ru.majordomo:copycompose:1.+")
        classpath("ru.majordomo.hms.rc.user:resources:1+")
    }
}
plugins {
    id 'org.ajoberstar.grgit' version '1.5.1'
    id "org.asciidoctor.convert" version "1.5.2"
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: 'docker-compose'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'ru.majordomo.copycompose'
apply plugin: 'maven-publish'

group = 'hms'
sourceCompatibility = 1.8
targetCompatibility = 1.8

def versionPropsFile = file('version.properties')
def versionBuild

if (versionPropsFile.canRead()) {
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    versionBuild = versionProps['VERSION_BUILD'].toInteger()
} else {
    throw new GradleException("Could not read version.properties!")
}

ext.autoIncrementBuildNumber = {
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'ru.majordomo.hms.rc.user'
            artifactId 'resources'
            version '1.3.' + versionBuild
            artifact resourceJar
        }
    }
    repositories {
        maven {
            url uri(mavenUrl)
            credentials {
                username = mavenUser
                password = mavenPass
            }
        }
    }
}

jar {
    baseName = 'rc-user'
    version = '0.0.1-SNAPSHOT'
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into "static/docs"
    }
}

task resourceJar(type: Jar, dependsOn: compileJava) {
    baseName = 'resources'
    from sourceSets.main.output.classesDir
    include 'ru/majordomo/hms/rc/user/resources/*'
}

repositories {
    mavenCentral()
    maven {
        url 'http://maven.intr'
    }
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    compile.exclude module: "hystrix-core"
    compile.exclude module: "feign-hystrix"
}

dependencies {
    compile('ru.majordomo.hms.rc.user:resources:1+')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.cloud:spring-cloud-starter-feign')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-data-redis')
    compile('org.springframework.boot:spring-boot-starter-amqp')
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("ru.majordomo.hms.rc.staff:resources:1.0.6.+")
    compile("org.shredzone.acme4j:acme4j-client:0.8")
    compile("org.shredzone.acme4j:acme4j-utils:0.8")
    compile("dnsjava:dnsjava:2.1.7")
    compile("com.cronutils:cron-utils:5.0.1")
    compile("commons-validator:commons-validator:1.5.1")
    compile("com.googlecode.libphonenumber:libphonenumber:7.7.3")
    compile("com.jcraft:jsch:0.1.54")
    testCompile('com.github.fakemongo:fongo:2.0.9')
    testCompile('com.github.kstyrc:embedded-redis:0.6')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc:${springRestDocsVersion}")
    testCompile('org.apache.qpid:qpid-broker:6.0.4')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR1"
    }
}

clean.doFirst {
    delete "${rootDir}/work/"
}

ext {
    snippetsDir = file("build/generated-snippets")
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    outputDir "build/asciidoc"
    dependsOn test
    sourceDir "src/main/asciidoc"
}

task buildDocker(type: Docker, dependsOn: build) {
    def dockerDir = "docker"
    def entryPoint = entryPoint_nondebug
    def git = org.ajoberstar.grgit.Grgit.open(file('.'))
    tagVersion = git.branch.getCurrent().getName().replaceAll("refs/heads/", "")
    if (tagVersion == "HEAD") {
        // в gitlab-runner после пулла branch.getCurrent() указывает всегда на HEAD в любой ветке
        tagVersion = project.projectBranch
    }
    if(project.hasProperty('debug')) {
        if(project.debug == "yes") {
            entryPoint = entryPoint_debug
        }
    }
    push = true
    project.group = "docker-registry.intr/" + project.group
    applicationName = jar.baseName
    dockerfile = file("${buildDir}/Dockerfile")
    doFirst {
        copy {
            from "${dockerDir}/Dockerfile"
            into buildDir
            expand(jarBuildName: jar.getArchiveName(), projectName: project.name, entryPoint: entryPoint)
        }
        copy {
            from jar
            into stageDir
        }
    }
}

task cloneCompose(type: Exec) {
    doFirst {
        delete 'docker-compose'
    }
    commandLine 'git', 'clone', 'git@gitlab.intr:hms/docker-compose.git'
}

task composePull(type: Exec) {
    commandLine 'docker-compose', 'pull'
}

task delCompose(type: Delete) {
    delete 'docker-compose'
}

composeDown {
    doLast { delete 'docker-compose.yml' }
}

build.dependsOn("resourceJar")
cookCompose.dependsOn("cloneCompose")
composePull.dependsOn("cookCompose")
composeUp.dependsOn("composePull")
composeUp.finalizedBy delCompose
publish.doFirst autoIncrementBuildNumber
